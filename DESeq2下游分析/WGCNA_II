##参考https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/FemaleLiver-02-networkConstr-man.pdf
#http://rstudio-pubs-static.s3.amazonaws.com/554864_6e0f44cdc1474b8ba2c5f8326559bbe4.html
#http://blog.genesino.com/2018/04/wgcna/
#如果模块过多该如何
library("WGCNA")
library(tidyverse)
raw_metabolism_data <- readxl::read_xlsx("/Users/yuxin/Nutstore Files/近期的任务 2-7月/CTZ_蛋白质组学/菌群代谢/菌群数据矩阵.xlsx") 
sample1 <- data.frame(sp=colnames(raw_metabolism_data %>% dplyr::select(G2.1:G5.10))) %>%
  mutate(sample=sp) %>% separate(.,sp,into=c("sp1","sp2"),sep="[.]") %>% 
  mutate(condition=ifelse(sp1 %in% c("G2","G1"),"control","disease")) %>% dplyr::select(sample,condition) 
sample2 <- readxl::read_xlsx("/Users/yuxin/Nutstore Files/近期的任务 2-7月/CTZ_蛋白质组学/input/副本临床信息_菌群_心超.xlsx",
                            sheet="Sheet2")
sample <- merge(sample1,sample2,by="sample") %>% tibble::column_to_rownames("sample")
metabolism_data  <- raw_metabolism_data %>% dplyr::select(ID,G2.1:G5.10) %>%tibble::column_to_rownames("ID")

min(log(metabolism_data))
max(log(metabolism_data))



traitData <- sample %>% mutate(control=ifelse(condition=="control",0,1),
                               disease=ifelse(condition=="disease",0,1)) %>%
  dplyr::select(-condition,-name,-date)


##检验是否有NA
datExpr0 <- t(log(metabolism_data))
gsg = goodSamplesGenes(datExpr0, verbose = 3)
gsg$allOK
if (!gsg$allOK)
{
  # Optionally, print the gene and sample names that were removed:
  if (sum(!gsg$goodGenes)>0)
    printFlush(paste("Removing genes:", paste(names(datExpr0)[!gsg$goodGenes], collapse = ", ")));
  if (sum(!gsg$goodSamples)>0)
    printFlush(paste("Removing samples:", paste(rownames(datExpr0)[!gsg$goodSamples], collapse = ", ")));
  # Remove the offending genes and samples from the data:
  datExpr0 = datExpr0[gsg$goodSamples, gsg$goodGenes]
}

sampleTree = hclust(dist(datExpr0), method = "average");
par(cex = 0.6);
par(mar = c(0,4,2,0))
#while (!is.null(dev.list()))  dev.off()
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
     cex.axis = 1.5, cex.main = 2)

h <- 1100  #设置剔除的阈值（根据聚类图来看）
abline(h = h, col = "red");
# Determine cluster under the line
clust = cutreeStatic(sampleTree, cutHeight = h,minSize = 2)  #minSize指最少x个样本算一类
table(clust)
# 选取不为0的
keepSamples = (clust!=0)
datExpr = datExpr0[keepSamples, ]
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)

### 核心步骤一：网络拓扑分析（限速步骤）
powers = c(c(1:10), seq(from = 12, to=20, by=2))
###绘图：绘制soft threshold power（即β，是x轴），分别和“网络中log(k)与log(p(k))相关系数的平方”与“对应的基因模块中所有基因邻接函数的均值”的关系
##我们需要找到最合适的β，这个数值貌似自动保存在了sft$powerEstimate中
##具体教程见http://www.bio-info-trainee.com/2535.html
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
par(mfrow = c(1,2));
cex1 = 0.9;
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
     main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=cex1,col="red");
abline(h=0.90,col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
     main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
softPower <- sft$powerEstimate
softPower

adjacency = adjacency(datExpr, power = softPower);

TOM = TOMsimilarity(adjacency);
dissTOM = 1-TOM

geneTree = hclust(as.dist(dissTOM), method = "average");
# Plot the resulting clustering tree (dendrogram)
sizeGrWindow(12,9)
plot(geneTree, xlab="", sub="", main = "Gene clustering on TOM-based dissimilarity",
     labels = FALSE, hang = 0.04);

minModuleSize = 30;
# Module identification using dynamic tree cut:
dynamicMods = cutreeDynamic(dendro = geneTree, distM = dissTOM,
                            deepSplit = 2, pamRespectsDendro = FALSE,
                            minClusterSize = minModuleSize);
table(dynamicMods)

##
dynamicColors = labels2colors(dynamicMods)
table(dynamicColors)
# Plot the dendrogram and colors underneath
sizeGrWindow(8,6)
plotDendroAndColors(geneTree, dynamicColors, "Dynamic Tree Cut",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05,
                    main = "Gene dendrogram and module colors")


##
MEList = moduleEigengenes(datExpr, colors = dynamicColors)
MEs = MEList$eigengenes
# Calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);
# Cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = "average");
# Plot the result
sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
     xlab = "", sub = "")
MEDissThres = 0.25
# Plot the cut line into the dendrogram
abline(h=MEDissThres, col = "red")
# Call an automatic merging function
merge = mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose = 3)
# The merged module colors
mergedColors = merge$colors;
# Eigengenes of the new merged modules:
mergedMEs = merge$newMEs;

##
sizeGrWindow(12, 9)
#pdf(file = "Plots/geneDendro-3.pdf", wi = 9, he = 6)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
                    c("Dynamic Tree Cut", "Merged dynamic"),
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05)
moduleColors = mergedColors
# Construct numerical labels corresponding to the colors
colorOrder = c("grey", standardColors(50));
moduleLabels = match(moduleColors, colorOrder)-1;
MEs = mergedMEs;


###
MEs_col <- MEs
plotEigengeneNetworks(MEs_col, "Eigengene adjacency heatmap", 
                      marDendro = c(3,3,2,4),
                      marHeatmap = c(3,4,2,2), plotDendrograms = T, 
                      xLabelsAngle = 90)
MEs_colpheno = orderMEs(cbind(MEs_col, traitData))
plotEigengeneNetworks(MEs_colpheno, "Eigengene adjacency heatmap", 
                      marDendro = c(3,3,2,4),
                      marHeatmap = c(3,4,2,2),
                      plotDendrograms = T, 
                      xLabelsAngle = 90)
##
corType <- "pearson"
TOM = TOMsimilarityFromExpr(datExpr, power=softPower, corType=corType, networkType="unsigned")
dissTOM = 1-TOM
plotTOM = dissTOM^7
diag(plotTOM) = NA
probes = colnames(datExpr)
dimnames(TOM) <- list(probes, probes)
# Export the network into edge and node list files Cytoscape can read
# threshold 默认为0.5, 可以根据自己的需要调整，也可以都导出后在
# cytoscape中再调整
cyt = exportNetworkToCytoscape(TOM,
                               edgeFile = paste("test", ".edges.txt", sep=""),
                               nodeFile = paste("test", ".nodes.txt", sep=""),
                               weighted = TRUE, threshold = 0.01,
                               nodeNames = probes, nodeAttr = moduleColors)

#下一步特别费时间
#TOMplot(plotTOM, net$dendrograms, moduleColors, main = "Network heatmap plot, all genes")
###hubs
hubs = chooseTopHubInEachModule(datExpr, colorh=moduleColors, power=softPower, type="unsigned")
hubs
con <- nearestNeighborConnectivity(datExpr, nNeighbors=50, power=softPower,
                                   type="unsigned", corFnc = "bicor")
##
library(dplyr)
edgeData1 <- cyt$edgeData[,c(1,2,3)]
edgeData2 <- cyt$edgeData[,c(2,1,3)]
nodeattrib <- cyt$nodeData[,c(1,3)]
colnames(nodeattrib) <- c("nodeName", "Module")
colnames(edgeData1) <- c("Node1","Node2","Weight")
colnames(edgeData2) <- c("Node1","Node2","Weight")
edgeData <- rbind(edgeData1, edgeData2)
edgeData$Module1 <- nodeattrib[match(edgeData$Node1, nodeattrib$nodeName), 2]
edgeData$Module2 <- nodeattrib[match(edgeData$Node2, nodeattrib$nodeName), 2]
edgeData <- edgeData[edgeData$Module1==edgeData$Module2,c(1,3,4)]
head(edgeData)
nodeTotalWeight <- edgeData %>% group_by(Node1, Module1) %>% summarise(weight=sum(Weight))
nodeTotalWeight <- nodeTotalWeight[with(nodeTotalWeight, order(Module1, -weight)),]
head(nodeTotalWeight)
nodeTotalWeightTop20 = nodeTotalWeight %>% group_by(Module1) %>% top_n(2, weight)
nodeTotalWeightTop20
a <- merge(raw_metabolism_data %>% dplyr::select(ID,Metabolites),
           nodeTotalWeight %>% dplyr::rename(ID=Node1),
                   by="ID") %>% tibble::column_to_rownames("ID")
write.csv(a,"HUB基因.csv")

nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
if (corType=="pearson") {
  modTraitCor = cor(MEs_col, traitData, use = "p")
  modTraitP = corPvalueStudent(modTraitCor, nSamples)
} else {
  modTraitCorP = bicorAndPvalue(MEs_col, traitData, robustY=robustY)
  modTraitCor = modTraitCorP$bicor
  modTraitP   = modTraitCorP$p
}

textMatrix = paste(signif(modTraitCor, 2), "\n(", signif(modTraitP, 1), ")", sep = "")
dim(textMatrix) = dim(modTraitCor)
sizeGrWindow(12, 12)
pdf("test2222.pdf",width =12,height = 12)
labeledHeatmap(Matrix = modTraitCor, xLabels = colnames(traitData), 
               yLabels = colnames(MEs_col), 
               cex.lab = 0.5, 
               ySymbols = colnames(MEs_col), colorLabels = FALSE, 
               colors = blueWhiteRed(50), 
               textMatrix = textMatrix, setStdMargins = FALSE, 
               cex.text = 0.5, zlim = c(-1,1),
               main = paste("Module-trait relationships"))
####
###
modNames = substring(names(MEs), 3)
geneModuleMembership = as.data.frame(cor(datExpr, MEs, use = "p"))
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples));
names(geneModuleMembership) = paste("MM", modNames, sep="");
names(MMPvalue) = paste("p.MM", modNames, sep="");
geneTraitSignificance = as.data.frame(cor(datExpr, traitData, use = "p"));
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples));
names(geneTraitSignificance) = paste("GS.", colnames(traitData), sep="");
names(GSPvalue) = paste("p.GS.", colnames(traitData), sep="");
geneInfo0 = data.frame(substanceBXH = colnames(datExpr),
                       moduleColor = moduleColors,
                       geneTraitSignificance,
                       GSPvalue,
                       MMPvalue)
geneInfo1 <- merge(raw_metabolism_data %>% dplyr::select(ID,Metabolites),
  geneInfo0 %>% tibble::rownames_to_column("ID"),
           by="ID") %>% tibble::column_to_rownames("ID")
write.csv(geneInfo1,"geneInfo1.csv")


