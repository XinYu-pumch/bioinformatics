#安装R
#对win在计算机-属性-环境变量-高级中，在path添加R的路径（直接添加"C:/R-4.0.1/bin"）
#先在官网下载tar.gz
tar -zxvf R-4.0.2.tar.gz 
cd R-4.0.2
./configure --prefix=/ifs1/Grp6/yuxin --enable-R-shlib
make  #由于没有权限，故只能make，而非sudo make
make install 
#临时配置环境变量
##https://www.cnblogs.com/youyoui/p/10680329.html
export PATH=/ifs1/Grp6/yuxin/yuxin_R/bin:$PATH
export PATH=/ifs1/Grp6/yuxin/bin:$PATH
R -vallina
install.packages("BiocManager", repos = 'https://mirrors.tuna.tsinghua.edu.cn/CRAN')
#或者离线安装R CMD INSTALL clue_0.3-54.tar.gz



PATH=$PATH:/ifs1/Grp6/yuxin/R-4.0.2/bin
PATH=$PATH:/ifs1/Grp6/yuxin/bin
export PATH="$PATH:/ifs1/Grp6/yuxin/yuxin_R/bin"
cd /ifs1/Grp6/yuxin/yuxin_R/bin
vi /etc/profile
#https://blog.csdn.net/DreamWeaver_zhou/article/details/86538490
vi/profile
export R_HOME=/ifs1/Grp6/yuxin/yuxin_R
export PATH=$PATH:$R_HOME/bin
source  profile






#安装python3
pip install wheel
pip install rpy2

#首先对文件进行处理
##注意，celltype中最好不要有空格！！
Idents(PBMC_anno) <- "orig.ident2"
PBMC_anno_HC <- subset(PBMC_anno, idents="HC",invert = FALSE)
a <- as(PBMC_anno_HC@assays$RNA@counts, "matrix")
count_norm_HC <- apply(a, 2, function(x) (x/sum(x))*10000)
write.table(count_norm_HC, "count_norm_HC.txt", sep="\t", quote=F)
meta_data_HC <- cbind(rownames(PBMC_anno_HC@meta.data), PBMC_anno_HC@meta.data[,"celltype", drop=F])   #####  cluster is the user’s specific cluster column
write.table(meta_data_HC, "meta_data_HC.txt", sep="\t", quote=F, row.names=F)



#进入linux
#总体参考https://www.biorxiv.org/content/10.1101/680926v1.full.pdf
#https://github.com/Teichlab/cellphonedb

source cpdb-venv/bin/activate
##对于大数据，最好加入subsampling，10000取3000，总时长大概1-2h
cellphonedb method statistical_analysis meta_data_BD.txt count_norm_BD.txt --counts-data=gene_name --subsampling  --project-name=statistical_analysis_BD --subsampling-log false
##进而得到mean.txt + pvalue


#下游处理(绘图)
##画点图
all_pval = read.table("out/statistical_analysis_HC_713/pvalues_1.txt", header=T, stringsAsFactors = F, sep="", comment.char = '', check.names=F, fill=TRUE)
all_means = read.table("out/statistical_analysis_HC_713/means_1.txt", header=T, stringsAsFactors = F, sep="", comment.char = '', check.names=F,fill=TRUE)

intr_pairs = all_pval$interacting_pair
all_pval = all_pval[,-c(1:11)]
all_means = all_means[,-c(1:11)]
selected_rows = intr_pairs
selected_columns = colnames(all_pval)
sel_pval = all_pval[match(selected_rows, intr_pairs), selected_columns]
sel_means = all_means[match(selected_rows, intr_pairs), selected_columns]

df_names = expand.grid(selected_rows, selected_columns)
pval = unlist(sel_pval)
pval[pval==0] = 0.0009
plot.data = cbind(df_names,pval)
pr = unlist(as.data.frame(sel_means))
pr[pr==0] = 1
plot.data = cbind(plot.data,pr)
colnames(plot.data) = c('pair', 'clusters', 'pvalue', 'mean')
my_palette <- colorRampPalette(c("black", "blue", "yellow", "red"), alpha=TRUE)(n=399)
plot.data$pvalue <- as.numeric(as.character(plot.data$pvalue))
plot.data$mean <- as.numeric(as.character(plot.data$mean))
plot.data_2 <- plot.data[which(abs(plot.data$pvalue) < 0.05),]
##注意修改名称
write.csv(plot.data_2,"cellphone_HC.csv")

ggplot(plot.data_2,aes(x=clusters,y=pair)) +
  geom_point(aes(size=-log10(pvalue),color=mean)) +
  scale_color_gradientn('Log2 mean (Molecule 1, Molecule 2)', colors=my_palette) +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major = element_blank(),
        axis.text=element_text(size=14, colour = "black"),
        axis.text.x = element_text(angle = 90, hjust = 1),
        axis.text.y = element_text(size=12, colour = "black"),
        axis.title=element_blank(),
        panel.border = element_rect(size = 0.7, linetype = "solid", colour = "black"))
##注意修改名称
ggsave('HC_plot.pdf', width = 80, height = 100, device = cairo_pdf, limitsize=F)


####热图
#此处修改
meta <- cbind(rownames(PBMC_anno_HC@meta.data), PBMC_anno_HC@meta.data[,"celltype", drop=F])
pvalue <- 0.05
all_intr = read.table("out/statistical_analysis_HC_713/pvalues_1.txt", header=T, stringsAsFactors = F, sep="", comment.char = '', check.names=F, fill=TRUE)
intr_pairs = all_intr$interacting_pair
all_intr = all_intr[,-c(1:11)]
split_sep = '\\|'
join_sep = '|'
pairs1_all = unique(meta[,2])
pairs1 = c()
for (i in 1:length(pairs1_all))
  for (j in 1:length(pairs1_all))
    pairs1 = c(pairs1,paste(pairs1_all[i],pairs1_all[j],sep=join_sep))
##此处修改
all_count = matrix(ncol=3)
colnames(all_count) = c('SOURCE','TARGET','count')
count1 = c()
for(i in 1:length(pairs1))
{
  p1 = strsplit(pairs1[i], split_sep)[[1]][1]
  p2 = strsplit(pairs1[i], split_sep)[[1]][2]
  
  n1 = intr_pairs[which(all_intr[,pairs1[i]]<=pvalue)]
  pairs_rev = paste(p2, p1, sep=join_sep)
  n2 = intr_pairs[which(all_intr[,pairs_rev]<=pvalue)]
  
  if(p1!=p2)
    count1 = length(unique(n1))+length(unique(n2))
  else
    count1 = length(unique(n1))
  
  new_count = c(p1,p2,count1)
  names(new_count) = c('SOURCE','TARGET','count')
  all_count = rbind(all_count, new_count)
}

all_count = all_count[-1,]
write.csv(all_count, "all_count_HC.csv")

#######   count interactions

count1 = c()
for(i in 1:length(pairs1))
{
  p1 = strsplit(pairs1[i], split_sep)[[1]][1]
  p2 = strsplit(pairs1[i], split_sep)[[1]][2]
  
  n1 = intr_pairs[which(all_intr[,pairs1[i]]<=pvalue)]
  
  pairs_rev = paste(p2, p1, sep=join_sep)
  n2 = intr_pairs[which(all_intr[,pairs_rev]<=pvalue)]
  if(p1!=p2)
    count1 = c(count1,length(unique(n1))+length(unique(n2)))
  else
    count1 = c(count1,length(unique(n1)))
  
}

#此处修改
count_matrix = matrix(count1, nrow=length(unique(meta[,2])), ncol=length(unique(meta[,2])))
rownames(count_matrix)= unique(meta[,2])
colnames(count_matrix)= unique(meta[,2])
all_sum = rowSums(count_matrix)
all_sum = cbind(names(all_sum), all_sum)
write.csv(all_sum, "all_sum_HC.csv")

col.heatmap <- colorRampPalette(c(col1,col2,col3 ))( 1000 )
pheatmap(count_matrix)



####求共同的通路
BD_rp <- read.csv("cellphone_BD.csv", header = TRUE, sep = ",",quote="\"", dec=".",
              fill = TRUE,comment.char="",row.names = 1)

HC_rp <- read.csv("cellphone_HC.csv", header = TRUE, sep = ",",quote="\"", dec=".",
                  fill = TRUE,comment.char="",row.names = 1)

BD_rp$support <- paste(BD_rp$pair,BD_rp$clusters,sep="")
HC_rp$support <- paste(HC_rp$pair,HC_rp$clusters,sep="")


common <- na.omit(BD_rp[match(HC_rp$support,BD_rp$support),, drop=F])

support_BD <- data.frame(support = setdiff(BD_rp$support,HC_rp$support))
support_HC <- data.frame(support = setdiff(HC_rp$support,BD_rp$support))

#match的后置
BD_unique <- na.omit(BD_rp[match(support_BD$support,BD_rp$support),,drop=F])
HC_unique <- na.omit(HC_rp[match(support_HC$support,HC_rp$support),,drop=F])

BD_unique = BD_unique[,-5]
HC_unique = HC_unique[,-5]


ggplot(HC_unique,aes(x=clusters,y=pair)) +
  geom_point(aes(size=-log10(pvalue),color=mean)) +
  scale_color_gradientn('Log2 mean (Molecule 1, Molecule 2)', colors=my_palette) +
  theme_bw() +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major = element_blank(),
        axis.text=element_text(size=14, colour = "black"),
        axis.text.x = element_text(angle = 90, hjust = 1),
        axis.text.y = element_text(size=12, colour = "black"),
        axis.title=element_blank(),
        panel.border = element_rect(size = 0.7, linetype = "solid", colour = "black"))
ggsave('HC_unique.pdf', width = 80, height = 100, device = cairo_pdf, limitsize=F)



