####The codes below are obtained from the function "LRplot" in "iTALK" package
####you can also create a new function based these codes

###first, set the parameter
data <- res
datatype<-'DEG'
gene_col = NULL 
transparency = 0.5 
link.arr.lwd = res$cell_from_logFC
link.arr.lty = NULL 
link.arr.col = NULL
link.arr.width = res$cell_to_logFC 
link.arr.type = NULL 
facing = "clockwise" 
cell_col = cell_col
print.cell = TRUE
track.height_1 = uh(2,"mm")
track.height_2 = uh(12, "mm")
annotation.height_1 = 0.01
annotation.height_2 = 0.01 
text.vjust = "0.4cm" 

###Second, get the correct order
###Here is the bug. The object "genes" only contains genes but not the "cell"
cell_group <- unique(c(data$cell_from, data$cell_to))
genes <- c(structure(data$ligand, names = data$cell_from), 
           structure(data$receptor, names = data$cell_to))
genes <- genes[!duplicated(paste(names(genes), genes))]
genes <- genes[order(names(genes))]
##So We creat a new matrix  
cell_group <- unique(c(data$cell_from, data$cell_to))
genes_2 <- c(structure(cbind(paste(data$cell_from, data$ligand)), names =data$cell_from ), 
           structure(cbind(paste(data$cell_to, data$receptor)), names = data$cell_to ))
genes_2 <- genes_2[!duplicated(paste(names(genes_2), genes_2))]
genes_2 <- genes_2[order(names(genes_2))]
genes_matrix <- data.frame(names=names(genes_2),genes_2=genes_2)
genes_matrix <- separate(genes_matrix,genes_2,into = c("cell","gene"),sep = " ")
genes_matrix$genes_2 <- genes_2




##Third, set the parameters of the lines in the plot. Just run the code
if (is.null(link.arr.lty)) {
  if (datatype == "mean count") {
    link.arr.lty = "solid"
  }else if (datatype == "DEG") {
    link.arr.lty = structure(ifelse(data$cell_from_logFC == 
                                      1e-04, "dashed", "solid"), names = paste(data$cell_from, 
                                                                               data$receptor))
  }else {
    print("invalid datatype")
  }
}

if (is.null(link.arr.col)) {
  if (datatype == "mean count") {
    data <- data %>% mutate(link_col = "black")
  }else if (datatype == "DEG") {
    data <- data %>% mutate(link_col = ifelse(cell_from_logFC == 
                                                1e-04, ifelse(cell_to_logFC > 0, "#d73027", 
                                                              "#00ccff"), ifelse(cell_to_logFC == 1e-04, 
                                                                                 ifelse(cell_from_logFC > 0, "#d73027", 
                                                                                        "#00ccff"), ifelse(cell_from_logFC > 
                                                                                                             0, ifelse(cell_to_logFC > 0, "#d73027", 
                                                                                                                       "#dfc27d"), ifelse(cell_to_logFC > 0, 
                                                                                                                                          "#9933ff", "#00ccff")))))
  }else {
    print("invalid datatype")
  }
}else {
  data$link_col = link.arr.col
}

if (is.null(link.arr.type)) {
  if (datatype == "mean count") {
    link.arr.type = "triangle"
  }else if (datatype == "DEG") {
    link.arr.type = structure(ifelse(data$cell_to_logFC == 
                                       1e-04, "ellipse", "triangle"), names = paste(data$cell_from, 
                                                                                    data$receptor))
  }else {
    print("invalid datatype")
  }
}

if (is.null(gene_col)) {
  comm_col <- structure(c("#99ff99", "#99ccff", 
                          "#ff9999", "#ffcc99"), names = c("other", 
                                                           "cytokine", "checkpoint", "growth factor"))
  gene_col <- structure(c(comm_col[data$comm_type], rep("#073c53", 
                                                        length(data$receptor))), names = c(data$ligand, data$receptor))
}
if (is.null(cell_col)) {
  cell_col <- structure(randomColor(count = length(unique(names(genes))), 
                                    luminosity = "dark"), names = unique(names(genes)))
}
if (is.null(link.arr.lwd)) {
  data <- data %>% mutate(arr_width = 1)
}else if (max(abs(link.arr.lwd)) - min(abs(link.arr.lwd)) == 
          0 && all(link.arr.lwd != 1e-04)) {
  data <- data %>% mutate(arr_width = ifelse(abs(link.arr.lwd < 
                                                   5), abs(link.arr.lwd), 5))
}else {
  data <- data %>% mutate(arr_width = ifelse(link.arr.lwd == 
                                               1e-04, 2, 1 + 5/(max(abs(link.arr.lwd)) - min(abs(link.arr.lwd))) * 
                                               (abs(link.arr.lwd) - min(abs(link.arr.lwd)))))
}

if (length(cell_group) != 1) {
  gap.degree <- do.call("c", lapply(table(names(genes)), 
                                    function(i) c(rep(1, i - 1), 8)))
}else {
  gap.degree <- do.call("c", lapply(table(names(genes)), 
                                    function(i) c(rep(1, i))))
}
circos.par(gap.degree = gap.degree)
if (length(gene_col) == 1) {
  grid.col = gene_col
}else {
  grid.col = gene_col[genes]
  names(grid.col) <- paste(names(genes), genes)
}


if (is.null(link.arr.width)) {
  data <- data %>% mutate(link.arr.width = data$arr_width/10)
}else if (max(abs(link.arr.width)) - min(abs(link.arr.width)) == 
          0 && all(link.arr.width != 1e-04)) {
  data <- data %>% mutate(link.arr.width = ifelse(abs(link.arr.width) < 
                                                    0.5, abs(link.arr.width), 0.5))
}else {
  data <- data %>% mutate(link.arr.width = ifelse(link.arr.width == 
                                                    1e-04, 0.2, (1 + 5/(max(abs(link.arr.width)) - min(abs(link.arr.width))) * 
                                                                   (abs(link.arr.width) - min(abs(link.arr.width))))/10))
}



###Forth,chordDiagram the plot. 
chordDiagram(as.data.frame(cbind(paste(data$cell_from, data$ligand), 
                                 paste(data$cell_to, data$receptor))), 
             order = genes_matrix$genes_2, ####We replace "paste(names(genes),genes)" with "genes_matrix$genes_2"
             grid.col = grid.col, 
             transparency = transparency, 
             directional = 1, 
             direction.type = "arrows", 
             link.arr.lwd = data$arr_width, 
             link.arr.lty = link.arr.lty, 
             link.arr.type = link.arr.type, 
             link.arr.width = data$link.arr.width, 
             link.arr.col = data$link_col, 
             col = "#00000000", 
             annotationTrack = c("grid"), 
             preAllocateTracks = list(list(track.height = track.height_1),list(track.height = track.height_2)), 
             annotationTrackHeight = c(annotation.height_1,annotation.height_2))

###Add the label of genes
circos.trackPlotRegion(track.index = 2, panel.fun = function(x,y) {
  xlim = get.cell.meta.data("xlim")
  ylim = get.cell.meta.data("ylim")
  sector.index = genes[get.cell.meta.data("sector.numeric.index")]
  circos.text(mean(xlim), mean(ylim), sector.index, col = "black", 
              cex = 0.7, facing = facing, niceFacing = TRUE)
}, bg.border = 0)



###Add the label of cells
for (c in unique(genes_matrix$names)) {
  genes_matrix_2 = genes_matrix[which(genes_matrix$names==c),]
  highlight.sector(sector.index = genes_matrix_2$genes_2, track.index = 1, 
                   col = ifelse(length(cell_col) == 1, cell_col, 
                                cell_col[c]), text = genes_matrix_2$cell, text.vjust = text.vjust, 
                   niceFacing = TRUE, lwd = 1)
}

